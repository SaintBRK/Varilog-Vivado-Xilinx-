// Модуль 2: 8-битный аддер
module adder8(
    input [7:0] a,
    input [7:0] b,
    output [7:0] sum
);
    wire c0, c1, c2, c3, c4, c5, c6; // Объявляем провода для переносов

    adder adder0(a[0], b[0], 0, sum[0], c0);
    adder adder1(a[1], b[1], c0, sum[1], c1);
    adder adder2(a[2], b[2], c1, sum[2], c2);
    adder adder3(a[3], b[3], c2, sum[3], c3);
    adder adder4(a[4], b[4], c3, sum[4], c4);
    adder adder5(a[5], b[5], c4, sum[5], c5);
    adder adder6(a[6], b[6], c5, sum[6], c6);
    adder adder7(a[7], b[7], c6, sum[7]); // Последний перенос можно игнорировать

endmodule

// Тестовый модуль для adder8
`timescale 1ns / 1ps

module adder8_tb; // Тестовый модуль для adder8

    // Объявление входов и выходов
    reg [7:0] a; // Вход a
    reg [7:0] b; // Вход b
    wire [7:0] sum; // Выход sum

    // Создание экземпляра модуля adder8
    adder8 uut (
        .a(a),
        .b(b),
        .sum(sum)
    );

    // Процедура для генерации тестов
    initial begin
        $display("a: %b, b: %b, sum: %b", a, b, sum);
        // Инициализация входов
        a = 8'b00000000; // Начальное значение для a
        b = 8'b00000000; // Начальное значение для b

        // Тестовые случаи
        #10 a = 8'b00000001; b = 8'b00000001; // 1 + 1
        #10 a = 8'b00000010; b = 8'b00000010; // 2 + 2
        #10 a = 8'b00001111; b = 8'b00000001; // 15 + 1
        #10 a = 8'b11111111; b = 8'b00000001; // 255 + 1 (переполнение)
        #10 a = 8'b10101010; b = 8'b01010101; // 170 + 85
        #10 a = 8'b00000000; b = 8'b00000000; // 0 + 0

        // Завершение симуляции
        #70 $finish;
    end
    endmodule
